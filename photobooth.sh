#!/bin/sh

export LC_ALL=C
export LANG=C

trap ctrl_c INT

ctrl_c() {
	echo "Killing iwatch..."
	killall iwatch
	if [ "$PID_IWATCH" != "" ]; then
		kill $PID_IWATCH
	fi
	if [ "$PID_GTHUMB" != "" ]; then
		echo "killing gthumb..."
		kill $PID_GTHUMB
	fi
	exit 0
}
##
## PB_DIR Should be the location of the install
## We could take this from $0
##
PB_DIR=$( cd "$( dirname "$0" )" && pwd )

DATA_DIR=/home/$USER/pbdata
PHOTOS_DIR=$DATA_DIR/photos
IM_DIR=$PHOTOS_DIR/im
LOGS_DIR=$DATA_DIR/logs

mkdir -p $PHOTOS_DIR $IM_DIR $LOGS_DIR

##
## Show a default 'boot splash image'
##
cd $PHOTOS_DIR
if [ -e /usr/local/bin/fbv ]; then
	##
	## Disable the cursor so it doesn't interfere with the screen
	##

	tty=/dev/tty1
	if [ -w $tty ]; then
	  setterm -cursor off > $tty
	else
	  echo "WARNING: $tty is read only. Allow user \"$USER\" access so we can disable to cursor on the screen"
	fi

	##
	## Catch any extra output to prevent output on our console screen
	## (our Image viewer)
	##

	exec > $LOGS_DIR/file 2>&1

	$PB_DIR/showjpg $PB_DIR/photobooth.jpg $DATA_DIR
else
	killall gthumb 2> /dev/null
	gthumb -f $PB_DIR/photobooth.jpg &
	PID_GTHUMB=$!
fi

##
## iwatch (from inotify) monitors $PHOTOS_DIR and
## updates the screen whenever a new picture appears.
##
## This just runs in the background...
##

iwatch -e moved_to \
	-c "$PB_DIR/showjpg %f $DATA_DIR" \
	$PHOTOS_DIR 2>&1 >> $LOGS_DIR/iwatch.log &

PID_IWATCH=$!

##
## Use gphoto2 to download anything generated by the camera
## automatically, and save in the PWD ($PHOTOS_DIR)
##

cd $PHOTOS_DIR

while true;
do
	yes | gphoto2 --wait-event-and-download 2>&1 >> $LOGS_DIR/photobooth.log;
	sleep 1;
done 2>&1 > /dev/null
